<<<<<<< HEAD
E_N
E_W_th
E_W
=======
while(ma_liste$depart[j]<limit)
{
partis <- partis + 1
}
file[[i]] <- present - partis
}
file
# au prealable, vous devez executer l'instruction suivante
# install.packages('randtoolbox')
library(randtoolbox)
source("tests.R")
source("listes.R")
lambda <- 10
mu <- 10
t <- 10
ma_liste <- Liste(lambda, mu, t)
length(ma_liste$arrivee)
ma_liste$arrivee[1]
*
3
4t
grbge
quit
<- 1/10
limit
library(randtoolbox)
source("tests.R")
source("listes.R")
lambda <- 10
mu <- 10
t <- 10
ma_liste <- Liste(lambda, mu, t)
# au prealable, vous devez executer l'instruction suivante
# install.packages('randtoolbox')
library(randtoolbox)
source("tests.R")
source("listes.R")
lambda <- 10
mu <- 10
t <- 10
ma_liste <- Liste(lambda, mu, t)
# au prealable, vous devez executer l'instruction suivante
# install.packages('randtoolbox')
library(randtoolbox)
source("tests.R")
source("listes.R")
lambda <- 10
mu <- 10
t <- 10
ma_liste <- Liste(lambda, mu, t)
for (i in 1:length(ma_liste$arrivee))
{
limit <- i/10
j <- 1
present <- 0
while(ma_liste$arrivee[j]<limit)
{
present <- present + 1
j <- j + 1
}
j <- 1
partis <- 0
while(ma_liste$depart[j]<limit)
{
partis <- partis + 1
}
file[[i]] <- present - partis
}
file
# au prealable, vous devez executer l'instruction suivante
# install.packages('randtoolbox')
library(randtoolbox)
source("tests.R")
source("listes.R")
lambda <- 10
mu <- 10
t <- 10
ma_liste <- Liste(lambda, mu, t)
for (i in 1:length(ma_liste$arrivee))
{
limit <- i/10
j <- 1
present <- 0
while(ma_liste$arrivee[j]<limit || j>length(ma_liste$arrivee)
{
present <- present + 1
j <- j + 1
}
j <- 1
partis <- 0
while(ma_liste$depart[j]<limit || j>length(ma_liste$depart))
{
partis <- partis + 1
j <- j + 1
}
file[[i]] <- present - partis
}
file
View(ma_liste)
# au prealable, vous devez executer l'instruction suivante
# install.packages('randtoolbox')
library(randtoolbox)
source("tests.R")
source("listes.R")
lambda <- 10
mu <- 10
t <- 10
ma_liste <- Liste(lambda, mu, t)
test <- rexp(10, lambda)
test
test <- rexp(10, lambda)
plot(test
test <- rexp(10, lambda)
test
test <- rexp(10, lambda)
# au prealable, vous devez executer l'instruction suivante
#install.packages('randtoolbox')
library(randtoolbox)
source("generateurs.R")
source("tests.R")
graine <- runif(1, 3000, 4000);
Nsimu <- 100
Nrepet <- 100
vn <- VonNeumann(Nsimu, Nrepet, graine)
mt <- MersenneTwister(Nsimu,Nrepet,graine)
RANDU <- RANDU(Nsimu, Nrepet, graine)
sm <- StandardMinimal(Nsimu, Nrepet, graine)
Histo(vn, mt, randu, sm)
Plot(vn, mt, randu, sm)
frequency_vn = rep(0, Nrepet)
frequency_mt = rep(0, Nrepet)
frequency_randu = rep(0, Nrepet)
frequency_sm = rep(0, Nrepet)
run_vn = rep(0, Nrepet)
run_mt = rep(0, Nrepet)
run_randu = rep(0, Nrepet)
run_sm = rep(0, Nrepet)
ordre_vn = rep(0, Nrepet)
ordre_mt = rep(0, Nrepet)
ordre_randu = rep(0, Nrepet)
ordre_sm = rep(0, Nrepet)
for (i in 1:Nrepet)
{
frequency_vn[i] <- Frequency(vn[,i], 14)
frequency_mt[i] <- Frequency(mt[,i], 32)
frequency_randu[i] <- Frequency(RANDU[,i], 31)
frequency_sm[i] <- Frequency(sm[,i], 31)
run_vn[i] <- Runs(vn[,i], 14)
run_mt[i] <- Runs(mt[,i], 32)
run_randu[i] <- Runs(RANDU[,i], 31)
run_sm[i] <- Runs(sm[,i], 31)
ordre_vn[i] <- Ordre(vn[,i])
ordre_mt[i] <- Ordre(mt[,i])
ordre_randu[i] <- Ordre(RANDU[,i])
ordre_sm[i] <- Ordre(sm[,i])
}
# Test Fréquence monobit
# Von Neumann
(mean(frequency_vn))
# Mersenne Twister
(mean(frequency_mt))
# RANDU
(mean(frequency_randu))
# Standard Minimal
(mean(frequency_sm))
# Test Runs
# Von Neumann
(mean(run_vn))
# Mersenne Twister
(mean(run_mt))
# RANDU
(mean(run_randu))
# Standard Minimal
(mean(run_sm))
# Test Ordre
# Von Neumann
(mean(ordre_vn))
# Mersenne Twister
(mean(ordre_mt))
# RANDU
(mean(ordre_randu))
# Standard Minimal
(mean(ordre_sm))
View(vn)
# au prealable, vous devez executer l'instruction suivante
#install.packages('randtoolbox')
library(randtoolbox)
source("generateurs.R")
source("tests.R")
graine <- runif(1, 3000, 4000);
Nsimu <- 100
Nrepet <- 100
vn <- VonNeumann(Nsimu, Nrepet, graine)
mt <- MersenneTwister(Nsimu,Nrepet,graine)
RANDU <- RANDU(Nsimu, Nrepet, graine)
sm <- StandardMinimal(Nsimu, Nrepet, graine)
Histo(vn, mt, randu, sm)
Plot(vn, mt, randu, sm)
frequency_vn = rep(0, Nrepet)
frequency_mt = rep(0, Nrepet)
frequency_randu = rep(0, Nrepet)
frequency_sm = rep(0, Nrepet)
# au prealable, vous devez executer l'instruction suivante
#install.packages('randtoolbox')
library(randtoolbox)
source("generateurs.R")
source("tests.R")
graine <- runif(1, 3000, 4000);
Nsimu <- 100
Nrepet <- 100
vn <- VonNeumann(Nsimu, Nrepet, graine)
mt <- MersenneTwister(Nsimu,Nrepet,graine)
RANDU <- RANDU(Nsimu, Nrepet, graine)
sm <- StandardMinimal(Nsimu, Nrepet, graine)
Histo(vn, mt, randu, sm)
Plot(vn, mt, randu, sm)
frequency_vn = rep(0, Nrepet)
frequency_mt = rep(0, Nrepet)
frequency_randu = rep(0, Nrepet)
frequency_sm = rep(0, Nrepet)
run_vn = rep(0, Nrepet)
run_mt = rep(0, Nrepet)
run_randu = rep(0, Nrepet)
run_sm = rep(0, Nrepet)
ordre_vn = rep(0, Nrepet)
ordre_mt = rep(0, Nrepet)
ordre_randu = rep(0, Nrepet)
ordre_sm = rep(0, Nrepet)
for (i in 1:Nrepet)
{
frequency_vn[i] <- Frequency(vn[,i], 14)
frequency_mt[i] <- Frequency(mt[,i], 32)
frequency_randu[i] <- Frequency(RANDU[,i], 31)
frequency_sm[i] <- Frequency(sm[,i], 31)
run_vn[i] <- Runs(vn[,i], 14)
run_mt[i] <- Runs(mt[,i], 32)
run_randu[i] <- Runs(RANDU[,i], 31)
run_sm[i] <- Runs(sm[,i], 31)
ordre_vn[i] <- Ordre(vn[,i])
ordre_mt[i] <- Ordre(mt[,i])
ordre_randu[i] <- Ordre(RANDU[,i])
ordre_sm[i] <- Ordre(sm[,i])
}
# Test Fréquence monobit
# Von Neumann
(mean(frequency_vn))
# Mersenne Twister
(mean(frequency_mt))
# RANDU
(mean(frequency_randu))
# Standard Minimal
(mean(frequency_sm))
# Test Runs
# Von Neumann
(mean(run_vn))
# Mersenne Twister
(mean(run_mt))
# RANDU
(mean(run_randu))
# Standard Minimal
(mean(run_sm))
# Test Ordre
# Von Neumann
(mean(ordre_vn))
# Mersenne Twister
(mean(ordre_mt))
# RANDU
(mean(ordre_randu))
# Standard Minimal
(mean(ordre_sm))
setwd("~/S2/Proba/TP")
# au prealable, vous devez executer l'instruction suivante
#install.packages('randtoolbox')
library(randtoolbox)
source("generateurs.R")
source("tests.R")
graine <- runif(1, 3000, 4000);
Nsimu <- 100
Nrepet <- 100
vn <- VonNeumann(Nsimu, Nrepet, graine)
mt <- MersenneTwister(Nsimu,Nrepet,graine)
RANDU <- RANDU(Nsimu, Nrepet, graine)
sm <- StandardMinimal(Nsimu, Nrepet, graine)
Histo(vn, mt, randu, sm)
Plot(vn, mt, randu, sm)
frequency_vn = rep(0, Nrepet)
frequency_mt = rep(0, Nrepet)
frequency_randu = rep(0, Nrepet)
frequency_sm = rep(0, Nrepet)
run_vn = rep(0, Nrepet)
run_mt = rep(0, Nrepet)
run_randu = rep(0, Nrepet)
run_sm = rep(0, Nrepet)
ordre_vn = rep(0, Nrepet)
ordre_mt = rep(0, Nrepet)
ordre_randu = rep(0, Nrepet)
ordre_sm = rep(0, Nrepet)
for (i in 1:Nrepet)
{
frequency_vn[i] <- Frequency(vn[,i], 14)
frequency_mt[i] <- Frequency(mt[,i], 32)
frequency_randu[i] <- Frequency(RANDU[,i], 31)
frequency_sm[i] <- Frequency(sm[,i], 31)
run_vn[i] <- Runs(vn[,i], 14)
run_mt[i] <- Runs(mt[,i], 32)
run_randu[i] <- Runs(RANDU[,i], 31)
run_sm[i] <- Runs(sm[,i], 31)
ordre_vn[i] <- Ordre(vn[,i])
ordre_mt[i] <- Ordre(mt[,i])
ordre_randu[i] <- Ordre(RANDU[,i])
ordre_sm[i] <- Ordre(sm[,i])
}
# Test Fréquence monobit
# Von Neumann
(mean(frequency_vn))
# Mersenne Twister
(mean(frequency_mt))
# RANDU
(mean(frequency_randu))
# Standard Minimal
(mean(frequency_sm))
# Test Runs
# Von Neumann
(mean(run_vn))
# Mersenne Twister
(mean(run_mt))
# RANDU
(mean(run_randu))
# Standard Minimal
(mean(run_sm))
# Test Ordre
# Von Neumann
(mean(ordre_vn))
# Mersenne Twister
(mean(ordre_mt))
# RANDU
(mean(ordre_randu))
# Standard Minimal
(mean(ordre_sm))
setwd("~/S2/Proba/TP")
# au prealable, vous devez executer l'instruction suivante
install.packages('randtoolbox')
# au prealable, vous devez executer l'instruction suivante
# ainstall.packages('randtoolbox')
library(randtoolbox)
source("generateurs.R")
source("tests.R")
graine <- runif(1, 3000, 4000);
Nsimu <- 100
Nrepet <- 100
vn <- VonNeumann(Nsimu, Nrepet, graine)
mt <- MersenneTwister(Nsimu,Nrepet,graine)
randu <- RANDU(Nsimu, Nrepet, graine)
sm <- StandardMinimal(Nsimu, Nrepet, graine)
Histo(vn, mt, randu, sm)
Plot(vn, mt, randu, sm)
frequency_vn = rep(0, Nrepet)
frequency_mt = rep(0, Nrepet)
frequency_randu = rep(0, Nrepet)
frequency_sm = rep(0, Nrepet)
run_vn = rep(0, Nrepet)
run_mt = rep(0, Nrepet)
run_randu = rep(0, Nrepet)
run_sm = rep(0, Nrepet)
ordre_vn = rep(0, Nrepet)
ordre_mt = rep(0, Nrepet)
ordre_randu = rep(0, Nrepet)
ordre_sm = rep(0, Nrepet)
for (i in 1:Nrepet)
{
frequency_vn[i] <- Frequency(vn[,i], 14)
frequency_mt[i] <- Frequency(mt[,i], 32)
frequency_randu[i] <- Frequency(randu[,i], 31)
frequency_sm[i] <- Frequency(sm[,i], 31)
run_vn[i] <- Runs(vn[,i], 14)
run_mt[i] <- Runs(mt[,i], 32)
run_randu[i] <- Runs(randu[,i], 31)
run_sm[i] <- Runs(sm[,i], 31)
ordre_vn[i] <- Ordre(vn[,i])
ordre_mt[i] <- Ordre(mt[,i])
ordre_randu[i] <- Ordre(randu[,i])
ordre_sm[i] <- Ordre(sm[,i])
}
# Test Fréquence monobit
# Von Neumann
(mean(frequency_vn))
# Mersenne Twister
(mean(frequency_mt))
# RANDU
(mean(frequency_randu))
# Standard Minimal
(mean(frequency_sm))
# Test Runs
# Von Neumann
(mean(run_vn))
# Mersenne Twister
(mean(run_mt))
# RANDU
(mean(run_randu))
# Standard Minimal
(mean(run_sm))
# Test Ordre
# Von Neumann
(mean(ordre_vn))
# Mersenne Twister
(mean(ordre_mt))
# RANDU
(mean(ordre_randu))
# Standard Minimal
(mean(ordre_sm))
# au prealable, vous devez executer l'instruction suivante
#install.packages('randtoolbox')
library(randtoolbox)
source("generateurs.R")
source("tests.R")
graine <- runif(1, 3000, 4000);
Nsimu <- 100
Nrepet <- 100
vn <- VonNeumann(Nsimu, Nrepet, graine)
mt <- MersenneTwister(Nsimu,Nrepet,graine)
RANDU <- RANDU(Nsimu, Nrepet, graine)
sm <- StandardMinimal(Nsimu, Nrepet, graine)
Histo(vn, mt, randu, sm)
Plot(vn, mt, randu, sm)
frequency_vn = rep(0, Nrepet)
frequency_mt = rep(0, Nrepet)
frequency_randu = rep(0, Nrepet)
frequency_sm = rep(0, Nrepet)
run_vn = rep(0, Nrepet)
run_mt = rep(0, Nrepet)
run_randu = rep(0, Nrepet)
run_sm = rep(0, Nrepet)
ordre_vn = rep(0, Nrepet)
ordre_mt = rep(0, Nrepet)
ordre_randu = rep(0, Nrepet)
ordre_sm = rep(0, Nrepet)
for (i in 1:Nrepet)
{
frequency_vn[i] <- Frequency(vn[,i], 14)
frequency_mt[i] <- Frequency(mt[,i], 32)
frequency_randu[i] <- Frequency(RANDU[,i], 31)
frequency_sm[i] <- Frequency(sm[,i], 31)
run_vn[i] <- Runs(vn[,i], 14)
run_mt[i] <- Runs(mt[,i], 32)
run_randu[i] <- Runs(RANDU[,i], 31)
run_sm[i] <- Runs(sm[,i], 31)
ordre_vn[i] <- Ordre(vn[,i])
ordre_mt[i] <- Ordre(mt[,i])
ordre_randu[i] <- Ordre(RANDU[,i])
ordre_sm[i] <- Ordre(sm[,i])
}
# Test Fréquence monobit
# Von Neumann
(mean(frequency_vn))
# Mersenne Twister
(mean(frequency_mt))
# RANDU
(mean(frequency_randu))
# Standard Minimal
(mean(frequency_sm))
# Test Runs
# Von Neumann
(mean(run_vn))
# Mersenne Twister
(mean(run_mt))
# RANDU
(mean(run_randu))
# Standard Minimal
(mean(run_sm))
# Test Ordre
# Von Neumann
(mean(ordre_vn))
# Mersenne Twister
(mean(ordre_mt))
# RANDU
(mean(ordre_randu))
# Standard Minimal
(mean(ordre_sm))
lambda <- 10
mu <- 20
D <- 1000
result <
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- Fi
>>>>>>> 3292a71b0857c6ed944777cbec82781989b471a0
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
<<<<<<< HEAD
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_N_th
E_N
E_W_th
E_W
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_N_th
E_N
E_W_th
E_W
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_A_th <- E_W_th - 1/mu
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_A = mean(result$attente_service)
E_N_th
E_N
E_W_th
E_W
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_A_th <- E_W_th - 1/mu
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_A = mean(result$attente_service)
E_N_th
E_N
E_W_th
E_W
E_A_th
E_A
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_Wa_th <- E_W_th - 1/mu
E_Na_th <- lambda * E_A
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_Wa = mean(result$attente_service)
E_N_th
E_N
E_W_th
E_W
E_Wa_th
E_Wa
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_Wa_th <- E_W_th - 1/mu
E_Na_th <- lambda * E_A
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_Wa = mean(result$attente_service)
E_N_th
E_N
E_W_th
E_W
E_Wa_th
E_Wa
E_Na_th
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 10000
result <- FileMM1(lambda, mu, D)
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_Wa_th <- E_W_th - 1/mu
E_Na_th <- lambda * E_A
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_Wa = mean(result$attente_service)
E_N_th
E_N
E_W_th
E_W
E_Wa_th
E_Wa
E_Na_th
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
nb_clients_attente <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t)-1)
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_Wa_th <- E_W_th - 1/mu
E_Na_th <- lambda * E_A
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_Wa = mean(result$attente_service)
E_Na = mean(nb_clients_attente)
E_N_th
E_N
E_W_th
E_W
E_Wa_th
E_Wa
E_Na_th
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
nb_clients_attente <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t)-1)
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_Wa_th <- E_W_th - 1/mu
E_Na_th <- lambda * E_A
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_Wa = mean(result$attente_service)
E_Na = mean(nb_clients_attente)
E_N_th
E_N
E_W_th
E_W
E_Wa_th
E_Wa
E_Na_th
E_Na
=======
View(result)
View(result)
>>>>>>> 3292a71b0857c6ed944777cbec82781989b471a0
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
nb_clients_attente <- sapply(temps, function(t) max(0, sum(result$arrivee <= t & result$depart > t)-1))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
<<<<<<< HEAD
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_Wa_th <- E_W_th - 1/mu
E_Na_th <- lambda * E_A
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_Wa = mean(result$attente_service)
E_Na = mean(nb_clients_attente)
E_N_th
E_N
E_W_th
E_W
E_Wa_th
E_Wa
E_Na_th
E_Na
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
nb_clients_attente <- sapply(temps, function(t) max(1, sum(result$arrivee <= t & result$depart > t)-1))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_Wa_th <- E_W_th - 1/mu
E_Na_th <- lambda * E_A
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_Wa = mean(result$attente_service)
E_Na = mean(nb_clients_attente)
E_N_th
E_N
E_W_th
E_W
E_Wa_th
E_Wa
E_Na_th
E_Na
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
nb_clients_attente <- sapply(temps, function(t) max(0.5, sum(result$arrivee <= t & result$depart > t)-1))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_Wa_th <- E_W_th - 1/mu
E_Na_th <- lambda * E_A
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_Wa = mean(result$attente_service)
E_Na = mean(nb_clients_attente)
E_N_th
E_N
E_W_th
E_W
E_Wa_th
E_Wa
E_Na_th
E_Na
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
=======
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 12
>>>>>>> 3292a71b0857c6ed944777cbec82781989b471a0
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
nb_clients_attente <- sapply(temps, function(t) max(0, sum(result$arrivee <= t & result$depart > t)-1))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
<<<<<<< HEAD
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_Wa_th <- E_W_th - 1/mu
E_Na_th <- lambda * E_A
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_Wa = mean(result$attente_service)
E_Na = mean(nb_clients_attente)
E_N_th
E_N
E_W_th
E_W
E_Wa_th
E_Wa
E_Na_th
E_Na
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
nb_clients_attente <- sapply(temps, function(t) max(0, sum(result$arrivee < t & result$depart > t)))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_Wa_th <- E_W_th - 1/mu
E_Na_th <- lambda * E_A
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_Wa = mean(result$attente_service)
E_Na = mean(nb_clients_attente)
E_N_th
E_N
E_W_th
E_W
E_Wa_th
E_Wa
E_Na_th
E_Na
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
nb_clients_attente <- sapply(temps, function(t) max(0, sum(result$arrivee < t & result$depart > t)-1))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_Wa_th <- E_W_th - 1/mu
E_Na_th <- lambda * E_A
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_Wa = mean(result$attente_service)
E_Na = mean(nb_clients_attente)
E_N_th
E_N
E_W_th
E_W
E_Wa_th
E_Wa
E_Na_th
E_Na
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
nb_clients_attente <- sapply(temps, function(t) max(0, sum(result$arrivee < t & result$depart > t)-1))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_Wa_th <- E_W_th - 1/mu
E_Na_th <- lambda * E_A
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_Wa = mean(result$attente_service)
E_Na = mean(nb_clients_attente)
E_N_th
E_N
E_W_th
E_W
E_Wa_th
E_Wa
E_Na_th
E_Na
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
nb_clients_attente <- sapply(temps, function(t) max(0, sum(result$arrivee <= t & result$depart > t)-1))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_Wa_th <- E_W_th - 1/mu
E_Na_th <- lambda * E_A
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_Wa = mean(result$attente_service)
E_Na = mean(nb_clients_attente)
E_N_th
E_N
E_W_th
E_W
E_Wa_th
E_Wa
E_Na_th
E_Na
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart >= t))
nb_clients_attente <- sapply(temps, function(t) max(0, sum(result$arrivee <= t & result$depart >= t)-1))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_Wa_th <- E_W_th - 1/mu
E_Na_th <- lambda * E_A
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_Wa = mean(result$attente_service)
E_Na = mean(nb_clients_attente)
E_N_th
E_N
E_W_th
E_W
E_Wa_th
E_Wa
E_Na_th
E_Na
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart >= t))
nb_clients_attente <- sapply(temps, function(t) max(0, sum(result$arrivee <= t & result$depart >= t)-1))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_Wa_th <- E_W_th - 1/mu
E_Na_th <- lambda * E_A
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_Wa = mean(result$attente_service)
E_Na = mean(nb_clients_attente)
E_N_th
E_N
E_W_th
E_W
E_Wa_th
E_Wa
E_Na_th
E_Na
source("fileMM1.R")
lambda <- 10
mu <- 20
D <- 1000
result <- FileMM1(lambda, mu, D)
temps <- seq(1, D, 1)
nb_clients <- sapply(temps, function(t) sum(result$arrivee <= t & result$depart > t))
nb_clients_attente <- sapply(temps, function(t) max(0, sum(result$arrivee <= t & result$depart > t)-1))
plot(temps, nb_clients, type = "h", xlab = "Temps", ylab = "Nombre de clients", main = "Évolution du nombre de clients dans la file d'attente")
alpha <- lambda / mu
E_N_th <- alpha / (1 - alpha)
E_W_th <- E_N / lambda
E_Wa_th <- E_W_th - 1/mu
E_Na_th <- lambda * E_A
temps_attente <- result$depart - result$arrivee
E_N = mean(nb_clients)
E_W = mean(temps_attente)
E_Wa = mean(result$attente_service)
E_Na = mean(nb_clients_attente)
E_N_th
E_N
E_W_th
E_W
E_Wa_th
E_Wa
E_Na_th
E_Na
=======
>>>>>>> 3292a71b0857c6ed944777cbec82781989b471a0
